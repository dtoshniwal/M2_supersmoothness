R = QQ[x,y,z];

M = (a,b,s) -> (ideal(a,b))^(s+1);
I0 = (a,r) -> ideal(a^(r+1));
I1 = (a,b,r,s) -> intersect(I0(b,r), M(a,b,s));
I2 = (a,b,c,r,s0,s1) -> intersect(I0(b,r), intersect(M(a,b,s0),M(b,c,s1)));
I3 = (a,b,c,r,s0,s1,k) -> (1-k)*I2(a,b,a,r,s0,s0) + k*I2(c,b,c,r,s1,s1);

--Triangulation
V = {{0/1,0/1}, {18/1,0/1}, {9/1,15/1}, {9/1,3/1}, {11/1,6/1}, {7/1,6/1}, {9/1,3/2}, {113/10,19/5}, {123/10,34/5}, {9/1,38/5}, {57/10,34/5}, {67/10,19/5}, {9/1,49/10}, {9/1,0/1}, {1533/340,511/68}, {63/8,21/8}, {1673/270,239/45}, {4587/340,511/68}, {81/8,21/8}, {3187/270,239/45}, {15087/1405,10086/1405}, {10203/1405,10086/1405}, {4532/455,4041/910}, {3658/455,4041/910}, {9/1,6/1}};
E = {{0,6}, {0,10}, {0,11}, {0,15}, {0,16}, {1,6}, {1,7}, {1,8}, {1,18}, {1,19}, {2,8}, {2,9}, {2,10}, {2,20}, {2,21}, {3,6}, {3,7}, {3,11}, {3,12}, {3,15}, {3,18}, {3,22}, {3,23}, {4,7}, {4,8}, {4,9}, {4,12}, {4,19}, {4,20}, {4,22}, {4,24}, {5,9}, {5,10}, {5,11}, {5,12}, {5,16}, {5,21}, {5,23}, {5,24}, {6,13}, {6,15}, {6,18}, {7,18}, {7,19}, {7,22}, {8,17}, {8,19}, {8,20}, {9,20}, {9,21}, {9,24}, {10,14}, {10,16}, {10,21}, {11,15}, {11,16}, {11,23}, {12,22}, {12,23}, {12,24}};
V = apply(V, v->append(v,1));
varlist = vars R;
varCol := transpose varlist;

--Linear forms
M := (transpose(matrix(R,V)));
mM := numrows M;
minorList := apply(E, e-> gens gb minors(mM,matrix(M_e)|varCol));
L = apply(#minorList, i -> minorList_i_(0,0));
--Perpendicular linear forms
Lp0 = apply(E, e -> (Me := mutableMatrix(M_e);
	a := Me_(1,1)-Me_(1,0)+Me_(0,0);
	b := -Me_(0,1)+Me_(0,0)+Me_(1,0);
	Me_(0,1) = a;
	Me_(1,1) = b;
	gens gb minors(mM,matrix(Me)|varCol)));
Lp1 = apply(E, e -> (Me := mutableMatrix(M_e);
	a := Me_(1,0)-Me_(1,1)+Me_(0,1);
	b := -Me_(0,0)+Me_(0,1)+Me_(1,1);
	Me_(0,0) = a;
	Me_(1,0) = b;
	gens gb minors(mM,matrix(Me)|varCol)));
Lp = apply(#Lp0, i -> {Lp0_i_(0,0), Lp1_i_(0,0)});
Lp = flatten(Lp);

--Edge connectivity
EV = {0, 6, 0, 10, 0, 11, 0, 15, 0, 16, 1, 6, 1, 7, 1, 8, 1, 18, 1, 19, 2, 8, 2, 9, 2, 10, 2, 20, 2, 21, 3, 6, 3, 7, 3, 11, 3, 12, 3, 15, 3, 18, 3, 22, 3, 23, 4, 7, 4, 8, 4, 9, 4, 12, 4, 19, 4, 20, 4, 22, 4, 24, 5, 9, 5, 10, 5, 11, 5, 12, 5, 16, 5, 21, 5, 23, 5, 24, 6, 13, 6, 15, 6, 18, 7, 18, 7, 19, 7, 22, 8, 17, 8, 19, 8, 20, 9, 20, 9, 21, 9, 24, 10, 14, 10, 16, 10, 21, 11, 15, 11, 16, 11, 23, 12, 22, 12, 23, 12, 24};
--Edge smoothness
rE = {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5};
--Vertex smoothness
rV = {5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3};

--Compute dimension
--global polynomials
dpoly = d -> binomial(d+2,2);
--edge contribution
dedge = d -> (
	 n = 0;
	 for i from 0 to 59 do (
		 r = rE_i; s0 = rV_(EV_(2*i)); s1 = rV_(EV_(2*i+1));
		 Ii := I2(Lp_(2*i),L_(i),Lp_(2*i+1),r,s0,s1);
		 n = n + hilbertFunction(d,module Ii);
	 );
	 return n;);
--vertex contribution
V = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 18, 19, 20, 21, 22, 23, 24};
E = {{15,16,17,18,19,20,21,22}, {23,24,25,26,27,28,29,30}, {31,32,33,34,35,36,37,38}, {0,5,15,39,40,41}, {6,16,23,42,43,44}, {7,10,24,45,46,47}, {11,25,31,48,49,50}, {1,12,32,51,52,53}, {2,17,33,54,55,56}, {18,26,34,57,58,59}, {3,19,40,54}, {4,35,52,55}, {8,20,41,42}, {9,27,43,46}, {13,28,47,48}, {14,36,49,53}, {21,29,44,57}, {22,37,56,58}, {30,38,50,59}};
dvertex = d -> (
	 n = 0;
	 for i from 0 to 18 do (
		 Ii := 0;
		 for j in E_i do (
			 r = rE_j; s0 = rV_(EV_(2*j)); s1 = rV_(EV_(2*j+1));
			 Ii = Ii + I2(Lp_(2*j),L_(j),Lp_(2*j+1),r,s0,s1);
		);
		 n = n + hilbertFunction(d,module Ii);
	 );
	 return n;);
--approximate vertex contribution
Ep = {{0,0,0,0,0,0,0,0}, {0,0,0,0,0,0,0,0}, {0,0,0,0,0,0,0,0}, {1,1,1,0,0,0}, {1,1,1,0,0,0}, {1,1,1,0,0,0}, {1,1,1,0,0,0}, {1,1,1,0,0,0}, {1,1,1,0,0,0}, {1,1,1,0,0,0}, {1,1,1,1}, {1,1,1,1}, {1,1,1,1}, {1,1,1,1}, {1,1,1,1}, {1,1,1,1}, {1,1,1,1}, {1,1,1,1}, {1,1,1,1}};
dvertexa = d -> (
	 n = 0;
	 for i from 0 to 18 do (
		 Ii := 0;
		 for j from 0 to (length(E_i)-1) do (
			 k = E_i_j;
			 r = rE_k; s0 = rV_(EV_(2*k)); s1 = rV_(EV_(2*k+1));
			 Ii = Ii + I3(Lp_(2*k),L_(k),Lp_(2*k+1),r,s0,s1,Ep_i_j);
		);
		 n = n + hilbertFunction(d,module Ii);
	 );
	 return n;);

--Degree range
dmin = 7; dmax=9;

--Dimension
apply(dmin..dmax, d -> max(dpoly(d),dpoly(d)+dedge(d)-dvertex(d)))
print "---------------------------";
apply(dmin..dmax, d -> max(dpoly(d),dpoly(d)+dedge(d)-dvertexa(d)))
